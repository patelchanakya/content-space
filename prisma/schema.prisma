// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This schema was initialized with `prisma init`
// It serves as the foundation for defining our database tables and relationships.
// All database tables and their respective fields will be defined within this section.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // This index on userId is specifically for compatibility with PlanetScale database,
  // as PlanetScale does not support certain relational features by default.
  // By indexing the userIds, we ensure efficient query performance.
  @@index([userId], name: "userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  credits       Int       @default(10)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// Blog model to map to PlanetScale database
model Blog {
  id     String  @id @default(cuid())
  name   String
  // image  String
  topics Topic[]
}

model Topic {
  id              String            @id @default(cuid())
  blogId          String
  name            String
  blog            Blog              @relation(fields: [blogId], references: [id])
  points          Point[]
  expandedContent ExpandedContent[] // This line is added

  @@index([blogId], name: "blogId")
}

model Point {
  id              String            @id @default(cuid())
  topicId         String
  name            String
  summary         String            @db.VarChar(5500)
  topic           Topic             @relation(fields: [topicId], references: [id])
  expandedContent ExpandedContent[]

  @@index([topicId], name: "topicId")
}

model ExpandedContent {
  id        String   @id @default(cuid())
  topicId   String
  pointId   String // Now required, every ExpandedContent must have a pointId
  content   String   @db.Text // The expanded content from the API
  createdAt DateTime @default(now())

  topic Topic @relation(fields: [topicId], references: [id])
  point Point @relation(fields: [pointId], references: [id])

  @@index([topicId], name: "topicId")
  @@index([pointId], name: "pointId")
}
